<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[基于tushare和ECharts的金融数据可视化]]></title>
      <url>%2F2017%2F10%2F19%2F%E5%9F%BA%E4%BA%8Etushare%E5%92%8CECharts%E7%9A%84%E9%87%91%E8%9E%8D%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
      <content type="text"><![CDATA[导言 之前写过一篇文章，介绍用python从网易财经抓取数据并使用matplotlib和R画出K线图。上述方法尤其适用的场景，有时候在交互式绘图方面显得力不从心，今天介绍以下基于ECharts进行交互绘图，并且我们将数据的获取方式进行更新，使用tushare这个开源的财经数据接口获取需要的数据。 简介首先介绍下tushare和ECharts两个有用的工具。 tushareTushare点击这里访问是一个由个人开发和维护的开源财经数据接口包，其中的数据包括股票的历史行情、实时行情数据、分类数据、财务数据和基本面的数据等，数据均是从第三方取到获取并包装，使用python对数据进行清洗和处理，最终的数据格式为Pandas中支持的data.frame格式的数据。 如Tushare本身介绍所述，该数据接口适用于量化投资分析师（Quant)、对金融市场进行大数据分析的企业和个人、金融公司以及学习利用python进行数据分析的人（包括学生）。所以如果你对金融分析感兴趣，而又不想付费使用商业的数据接口，Tushare是一个非常不错的选择，如果你觉得这个接口很好用，并且愿意适当支持作者，你也可以在Tushare的主页进行捐助. EChartsECharts是一个纯粹的JavaScript库，由百度开发和维护的一个开源项目。这个百度的产品确实很赞，你可以在官网查看实例，并且可以修改实例来体验产品，可以发现基本上主流的图形都可以支持，而且由于文档有中文版，适合对英语阅读有困难的朋友。 另外，hexo其实是支持echarts模块的，其插件为hexo-tag-echarts3，并且你可以参考使用方法，对于此本文就不再展开说明了。 安装安装tushareTushare的安装很简单，可以在网站查看其的系统依赖，一般Python是最新版的都支持（包括Python2和Python3）。另外，因为tushare的数据格式为data.frame，因此要求python安装了Pandas库。使用命令安装如下： 以Mac OS为准，Linux和Windows参考网站的提示方法 123456pip install tushare # Python2安装pip3 install tushare # Python3安装# 如果安装报错，一般是没有安装Pandas，可以如下安装：pip install pands # Python2安装pip3 install pands # Python3安装 安装完就可以使用tushare了。 安装ECharts实际上ECharts可以下载到本地，并可以和你的web或者app程序打包应用，我们这次使用的ECharts不是使用本地调用代码，而是使用Python的一个模块，其中动态导入js脚本实现绘图。因此本次不用安装ECharts。 实现原理在Python的Ipython中，有个display的模块，可以实现HTML效果的展示，更出彩的是Ipython Notebook中自带JS模块可以动态导入js脚本并执行。可以先看看示例（本文的示例均是使用Ipython)： 123from Ipython.display import HTMLHTML('这是&lt;font color=\'read\'&gt;HTML代码&lt;/font&gt;测试代码') ECharts的基本用法ECharts是个纯粹的JS图形库，所以其语言本质是Javascript语言。根据官网的示例，我们构建以下一个图形： 1234567891011121314151617181920212223242526272829303132333435363738option = &#123; title : &#123; text: '各金融资产比重', subtext: '纯属虚构', x:'center' &#125;, tooltip : &#123; trigger: 'item', formatter: "&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)" &#125;, legend: &#123; orient: 'vertical', left: 'left', data: ['股票','债券','基金','金融衍生品','现金及等价物'] &#125;, series : [ &#123; name: '金融资产', type: 'pie', radius : '55%', center: ['50%', '60%'], data:[ &#123;value:335, name:'债券'&#125;, &#123;value:310, name:'基金'&#125;, &#123;value:234, name:'现金及等价物'&#125;, &#123;value:135, name:'金融衍生品'&#125;, &#123;value:1548, name:'股票'&#125; ], itemStyle: &#123; emphasis: &#123; shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' &#125; &#125; &#125; ]&#125;; 对应的图形就如下所示，并且图形可以交互显示: // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('echarts6046')); // 指定图表的配置项和数据 var option = option = { title : { text: '各金融资产比重', subtext: '纯属虚构', x:'center' }, tooltip : { trigger: 'item', formatter: "{a} {b} : {c} ({d}%)" }, legend: { orient: 'vertical', left: 'left', data: ['股票','债券','基金','金融衍生品','现金及等价物'] }, series : [ { name: '金融资产', type: 'pie', radius : '55%', center: ['50%', '60%'], data:[ {value:335, name:'债券'}, {value:310, name:'基金'}, {value:234, name:'现金及等价物'}, {value:135, name:'金融衍生品'}, {value:1548, name:'股票'} ], itemStyle: { emphasis: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } } } ] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); 所以我们看到，ECharts基于javascript绘制图形，定义好图形的参数和数据，用浏览器渲染就能得到所需要的图形，我们本文就使用了Tushare获取数据，并对数据进行清洗和处理。 Tushare的基本用法安装tushare后可以直接使用，tushare有各种接口返回不同的数据，非常容易操作，例如： 123456789101112131415161718import tushare as tsprice_by_day = ts.get_k_data(code='600000', ktype='D', autype='None', start='2017-01-01', end='2017-10-19')price_by_day[0:10]# 运行结果如下：Out[5]: date open close high low volume code0 2017-01-03 16.21 16.30 16.44 16.17 162371.0 6000001 2017-01-04 16.29 16.33 16.35 16.18 296587.0 6000002 2017-01-05 16.30 16.30 16.38 16.24 264376.0 6000003 2017-01-06 16.30 16.18 16.30 16.13 171955.0 6000004 2017-01-09 16.24 16.20 16.29 16.13 149087.0 6000005 2017-01-10 16.18 16.19 16.24 16.14 79967.0 6000006 2017-01-11 16.24 16.16 16.24 16.15 91933.0 6000007 2017-01-12 16.18 16.12 16.20 16.11 82961.0 6000008 2017-01-13 16.10 16.27 16.29 16.10 190341.0 6000009 2017-01-16 16.23 16.56 16.60 16.10 533047.0 600000 示例中，我们使用了ts中的get_k_data方法，获取了股票代码为600000（浦发银行）的历史日数据，同样我们还可以使用其它接口获取其它的数据，甚至包括分时数据。 实现股票的日K线图根据以上我们的想法，首先 未完成，待续]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LaTeX字体设置技巧]]></title>
      <url>%2F2017%2F08%2F26%2FLaTeX%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[导言 上次介绍了LaTeX中如何使用表格，本次介绍如何在LaTeX中使用字体，包括使用中文字体。 基本设置在任何文档处理工具中，字体设置是必须的。Word中可以对整个文章使用默认的字体，也可以单独对某部分文字使用不同的字体，而且相对比较简单，只需要选择要设置的部分文字，选择使用的字体就可以了，但是如何个性化的字体比较碎散就需要大量的操作了。 LaTeX也一样，需要配置使用字体。一般如果不设置，会使用默认的字体： 1234567%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\begin&#123;document&#125;This is a test document, if don&apos;t declare the font, LaTeX will use default font which is Computer Modern Roamn created by Donald Knuth. \end&#123;document&#125; 那么输出的效果如下图： 可以看到，LaTeX使用了其自带的默认字体Computer Modern Roamn（CMR），这个字体是由Donald Knuth1创建的。 另外，默认的设置下是不支持中文字体的： 12345678%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\begin&#123;document&#125;This is a test document. \\这是一个测试文档\end&#123;document&#125; 原因在于LaTeX的默认字体CMR并不支持中文。 支持中文LaTeX中要支持中文，可以使用CJK环境。但本文不介绍这种方式，xetex（xelatex）支持UTF8编码，所以解决了中文支持的问题。一般我们使用fontspec来调用字体。 123456789%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec&#125;\setmainfont&#123;Comic Sans MS&#125; % 设置字体为Comic Sans MS\begin&#123;document&#125;This is a test document. \\\end&#123;document&#125; 编译后的文档如下图： 但是Comic Sans MS也并不支持中文，所以如果输入中文，还是会出现乱码： 12345678910%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec&#125;\setmainfont&#123;Comic Sans MS&#125; % 设置字体为Comic Sans MS\begin&#123;document&#125;This is a test document, we use Comic Sans MS font. \\这是一个测试字体的文档。\end&#123;document&#125; 所示，编译结果的文档如下，中文部分出现了乱码： 我们设置新的字体，字体能够支持中文： 12345678910%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec&#125;\setmainfont&#123;MicrosoftYaHei&#125; % 使用微软雅黑字体\begin&#123;document&#125;This is a test document, we use MicrosoftYaHei font. \\这是一个测试字体的文档，使用微软雅黑字体。\end&#123;document&#125; 编译结果如图，已经能显示中文了： 更多设置如果只是设置了字体还是不足的，有些配置能让字体显示等更方便，比如连字方式、断行方式等： 1234567891011%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec,xunicode, xltxtra&#125;\setmainfont&#123;MicrosoftYaHei&#125; % 使用微软雅黑字体\begin&#123;document&#125;This is a test document, we use MicrosoftYaHei font. \\这是一个测试字体的文档，使用微软雅黑字体，如果不设置断行方式等，那么当输入的文档内容超过一行时，不能自动的进行断句，英文断句不用设置，默认了断句方式。\end&#123;document&#125; 编译的结果如下，可以看到中文不能智能断行，导致文本内容超出了页面： 所以，可以配置断行的方式，可以由LaTeX自动的对句子断行： 12345678910111213141516%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec,xunicode, xltxtra&#125;\setmainfont&#123;MicrosoftYaHei&#125; % 使用微软雅黑字体%-----------------------------------------------------------------% 设置文本字体和断句方式\XeTeXlinebreaklocale &quot;zh&quot;\XeTeXlinebreakskip = 0pt plus 1pt \begin&#123;document&#125;This is a test document, we use MicrosoftYaHei font. \\这是一个测试字体的文档，使用微软雅黑字体，如果不设置断行方式等，那么当输入的文档内容超过一行时，不能自动的进行断句，英文断句不用设置，默认了断句方式。\end&#123;document&#125; 编译后结果如下，中文能够自动的断行了： 中英文字体分别设置如果设置了默认字体，所有的文本会使用同一个字体，如上面的一些图片，英文和中文使用了同一个微软雅黑字体。事实上，LaTeX可以让中英文分别使用不同的字体。方式是用fontspec和xeCJK分别设置main字体，来使用不同字体： 1234567891011121314151617181920%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;fontspec,xunicode, xltxtra&#125;\usepackage&#123;xeCJK&#125; % 设置中文字体%-----------------------------------------------------------------% 定义字体\defaultfontfeatures&#123;Mapping=tex-text&#125;\setCJKmainfont&#123;圆体-简&#125; % 中文的字体为圆体\setmainfont&#123;Comic Sans MS&#125; % 英文字体使用Comic Sans MS%-----------------------------------------------------------------% 设置文本字体和断句方式\XeTeXlinebreaklocale &quot;zh&quot;\XeTeXlinebreakskip = 0pt plus 1pt \begin&#123;document&#125;This is a test document, we use Comic Sans MS font for English. \\这是一个测试字体的文档，中文使用圆体字体。\end&#123;document&#125; 编译后的结果如图所以，我们看到中英文使用不同字体： main字体是重要使用的字体，还有另外两个字体设置： 1234\setCJKsansfont&#123;MicrosoftYaHei&#125;\setCJKmonofont&#123;KaiTi&#125;\setsansfont&#123;Cochin&#125;\setmonofont&#123;Courier New&#125; 分别是sansfont和monofont字体。 一般而言，fontspec字体设置有很多选项，可以参考其文档。 1Donald Knuth是TeX的发明者，LaTeX其实就是基于TeX一系列宏包命令]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LaTeX中的表格处理方式和技巧1]]></title>
      <url>%2F2017%2F08%2F03%2FLaTeX%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E5%92%8C%E6%8A%80%E5%B7%A71%2F</url>
      <content type="text"><![CDATA[导言 有段时间没有写笔记了，今天整理了一篇关于LaTeX写文档的内容，这是一个很少有人用的排版软件，我经常用来写报告、书籍和文档。今天介绍的是关于在LaTeX中使用表格。 基本处理在使用LaTeX写文档时，不可避免会使用到表格。我们在使用word时，会有内置基本的表格工具，或者直接在Excel等表格工具中进行编辑处理后粘贴过来。但是LaTeX不是这样，LaTeX需要使用宏包才能做出表格，而且LaTeX有很多不同的宏包完成表格的绘制工作。 标准LaTeX提供array和tabular两个制表环境，它们的的完整格式如下： 123\begin&#123;array&#125;[表格位置]&#123;列样式&#125;列表内容\end&#123;array&#125; 123\begin&#123;tabular&#125;[表格位置]&#123;列样式&#125;列表内容\end&#123;tabular&#125; 123\begin&#123;tabular*&#125;&#123;表格总宽度&#125;[表格位置]&#123;列样式&#125;列表内容\end&#123;tabular*&#125; 一般array使用于数组矩阵的排版，并且只能在数学环境中使用，如在equation中使用。绝大多数的情况下我们使用的是tabular环境来绘制表格。可以参考如下的案例：123456789101112131415%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;doc&#125;\begin&#123;document&#125;\begin&#123;tabular&#125;&#123;lcc&#125; \toprule %------------------------------ 功能 &amp;WEB &amp;APP \\ \midrule %------------------------------ 注册 &amp;$\surd$ &amp;$\surd$ \\ 登录 &amp;$\surd$ &amp;$\surd$ \\ 推送 &amp;$\times$ &amp;$\surd$ \\ \bottomrule\end&#123;tabular&#125;\end&#123;document&#125; 那么得到的表格如图所示： 线框我们在Excel表格中经常会有单元格的线条，可以在上面的示例中有{列样式}的选项，我们一般用|来表示竖线框，\hline表示横线框，示例如下： 12345678910111213%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;doc&#125;\begin&#123;document&#125;\begin&#123;tabular&#125;&#123;|l|c|c|&#125; \hline 功能 &amp;WEB &amp;APP \\ \hline 注册 &amp;$\surd$ &amp;$\surd$ \\ \hline 登录 &amp;$\surd$ &amp;$\surd$ \\ \hline 推送 &amp;$\times$ &amp;$\surd$ \\ \hline\end&#123;tabular&#125;\end&#123;document&#125; 得出的表格如图所示： 其中，在选项中的lc表示该列的内容的位置，有三个参数：l、c、r，分别是左对齐、居中对齐和右对齐 位置一般而言，表格的位置是浮动的，即是会根据文本内容确定，比如以上两个例子其实表格在文本的靠左位置，因此如果需要定义表格的位置。表格的位置为可选的选项: 12345678910111213141516%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;doc&#125;\begin&#123;document&#125;\begin&#123;table&#125;[!htbp]\centering\begin&#123;tabular&#125;&#123;|l|c|c|&#125; \hline 功能 &amp;WEB &amp;APP \\ \hline 注册 &amp;$\surd$ &amp;$\surd$ \\ \hline 登录 &amp;$\surd$ &amp;$\surd$ \\ \hline 推送 &amp;$\times$ &amp;$\surd$ \\ \hline\end&#123;tabular&#125;\end&#123;table&#125;\end&#123;document&#125; \centering表示将表格居中放置，!htbp表示对位置的一种处理： 123456!表示无视美学规则，按下面的要求放置；然后h t b p分别代表4中放置方式，优先级依次递减h=here 放置在代码中这个图片出现的位置，也就是你想让它出现的位置；t = top 放在该页顶端；b = bottom 放在该页底部；p = page 另起一页单独放。 表格长度在以上表格中，我们发现表格的长度和列的内容长度一致，所以会导致有时候表格长度过短，一般来说需要自定义表格长度的时候我们使用tabular*环境： 123456789101112131415161718%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;doc&#125;\begin&#123;document&#125;\begin&#123;table&#125;[!p]\centering\begin&#123;tabular*&#125;&#123;0.75\textwidth&#125;&#123;lcc&#125; \toprule 功能 &amp;WEB &amp;APP \\ \midrule 注册 &amp;$\surd$ &amp;$\surd$ \\ 登录 &amp;$\surd$ &amp;$\surd$ \\ 推送 &amp;$\times$ &amp;$\surd$ \\ \bottomrule\end&#123;tabular*&#125;\end&#123;table&#125;\end&#123;document&#125; 其中{0.75\textwidth}表示表格总长度，\textwidth表示的是这个文档的文本长度，所以这里表示整个文本长度的四分之三。当然你也可以用cm或者pt等单位表示长度，然后绘制的表格如下图所示： 但是有个特别不好的情况，最后一列的宽度太大，占据了剩余的文本长度，我们需要调整每列的长度，代码如下： 123456789101112131415161718%!TEX program = xelatex\documentclass[12pt,a4paper]&#123;article&#125;\usepackage&#123;doc&#125;\begin&#123;document&#125;\begin&#123;table&#125;[!p]\centering\begin&#123;tabular*&#125;&#123;0.75\textwidth&#125;&#123;@&#123;\extracolsep&#123;\fill&#125;&#125;lcc&#125; \toprule 功能 &amp;WEB &amp;APP \\ \midrule 注册 &amp;$\surd$ &amp;$\surd$ \\ 登录 &amp;$\surd$ &amp;$\surd$ \\ 推送 &amp;$\times$ &amp;$\surd$ \\ \bottomrule\end&#123;tabular*&#125;\end&#123;table&#125;\end&#123;document&#125; 这样，表格就好看点了。 在前一段代码中，我们增加了{@{\extracolsep{\fill}}，表示了把每列的剩余长度均匀的填充，将整个表格更合理的安排列宽。 结束语好了，今天就介绍到这里。下一篇我们继续讨论，跨页表格以及合并行、和并列、对角线、表内注释等内容。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[今日扯淡]]></title>
      <url>%2F2017%2F06%2F09%2F%E4%BB%8A%E6%97%A5%E6%89%AF%E6%B7%A1%2F</url>
      <content type="text"><![CDATA[前传 最近一直在写曹操的一篇文章，想写的诙谐幽默点所以在使吃奶的劲，奈何技能已经多年不用，所以进度较慢，大家需要静静等待一段时间。想想好久没吐槽了，昨天怼了一个大学同学，也正好吐吐槽。 关于怼人其实我是一个好人，我已经快二十年没骂过人了，也没说过除了靠、艹、擦、我去之外的脏话了，当然我不否认前面几个字确实有点脏。 包括今天，我骂人了但我仍然克制住了不说脏话。鲁迅先生说：不在沉默中爆发，就在沉默中灭亡。 确实，我忍他挺久了。 我发的朋友圈，他的评论永远是矫情或者装逼，可能是调侃吧，但我过去就算了。 如果一次两次，我可以视为一种调侃，但一直如此，那就是他嘴贱了。 而我平生最讨厌的人中就有嘴贱的人。 而且，我和他的关系并没有好到我可以视他的嘴贱为好基友般的调戏，哦不，调侃。 不光如此，我也一直对他的为人并不感冒。 我觉得我骂得还算轻的了，要是拿我当年写作文的风范，我可以用通篇不带脏话的骂得他怀疑人生。 更搞笑的是他居然还认为他这种嘴贱是理所应当。 我就不用说当年我用知识帮他忙，然后他反过来在我秀的书架时候评论我装逼了。 嘿嘿，我就秀了怎么样，咬我？ 反正现在狂犬病疫苗也不贵。 我这个人其实挺记仇的… 还有个同学，读硕士的时候写论文然后要我帮忙找数据、建模型、写代码，然后这个同学也在他的评论下跟了句：装的可以。 嗯，我是个本科生，而且那时毕业快5年了吧… 所以啊，人的心态啊，奇怪！ 你看，我的好基友和我说话都没正常过，我都觉得挺好，嗯我就是看人下菜的… 音乐欣赏好了，负面情绪发泄了，在写这篇文章的同时录了首歌，来大家请侮辱我吧。男低音版的漂洋过海来看你。 new APlayer({ element: document.getElementById("aplayer1"), narrow: false, autoplay: false, showlrc: 0, music: { title: "漂洋过海来看你", author: "allenmagic", url: "http://op0byyd4a.bkt.clouddn.com/%E9%A3%98%E6%B4%8B%E8%BF%87%E6%B5%B7%E6%9D%A5%E7%9C%8B%E4%BD%A0.mp3", pic: "http://7viihf.com1.z0.glb.clouddn.com/face.jpg", } }); 哎，还是站起来好好唱歌了，果然一心不能二用，有好多地方没处理好，连气息都已经控制不住了，失败啊。 后记以前吧，我还是个好孩子，看见不顺眼的人我还可以放过，哪怕对我也是那样，我也忍着。 幸亏抑郁症啊（我特么感谢的居然是一个病），让我明白了，忍那么多干嘛，我又不喜欢你，你也带不来给我生理上和心理上的欢愉，才懒得管你。 不怼你我怼谁，正好我最近烦着呢。 我还必须怼了你再拉黑你。 哦，关于我评论他朋友圈？我没那闲工夫…]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据分析系列-R-数据]]></title>
      <url>%2F2017%2F05%2F27%2F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97-R-%E6%95%B0%E6%8D%AE%2F</url>
      <content type="text"><![CDATA[引言上次做了R的介绍和安装点击这里直达，主要介绍了在各个不同的系统中怎么安装R软件，还基础的介绍了怎么使用R，今天探讨下R的数据相关的知识。 R的对象R中的所有对象都建立在一组基本的内嵌对象之上的，对象的类决定了其在R中的存储方式，同时R的对象也都属于某个类，而R提供了一组面向对象编程的机制。_这段话我也没懂!_ R的基本对象类型R有如下的基本对象类型： 基本向量 复合对象 特殊对象 R语言（即R代码） 函数 内置对象 字节码对象 以下简单介绍以下R的常用的对象。 向量向量是R中最基本的对象，也是最常用的存储数据的对象。特别的，向量中的元素都会被转成同样的数据类型，也就是说向量的元素都是同种类的数据。R有多种创建向量的方法，其中最常见的是c函数：123&gt; v &lt;- c(1,2,3,4)&gt; v[1] 1 2 3 4 另外，我们可以使用操作符:生成向量:12&gt; 1:10 [1] 1 2 3 4 5 6 7 8 9 10 另外一个更加灵活的是seq函数方式：12&gt; seq(from=1, to=10, by=2)[1] 1 3 5 7 9 其中by参数理解为步长，表示生成从1到10步长为2的向量。seq还有其它很多种用法来生成序列，可以使用help(&#39;seq&#39;)来查看帮助文档。 逻辑向量这里特别说明下逻辑向量，R是允许操作逻辑向量的。其中逻辑向量的元素可以被赋予的值有TRUE,FALSE和NA,我们可以试试下面的语句:1234567&gt; v[1] 1 2 3 4&gt; m &lt;- v &gt; 2.5&gt; m[1] FALSE FALSE TRUE TRUE&gt; class(m)[1] "logical" 其中v是第一个代码创建的向量。而m就是我们通过逻辑运算符$\lt、\leq、\gt、\geq$来判断生成的一个向量。 矩阵矩阵也是R中常用的对象类型，矩阵可以看成多个带有下标类型的的元素集合，和数学中的矩阵类似，一般我们可以把其中某个元素表示为$a_{ij}$，更通用的可视化的矩阵如下:$$\begin{equation}A_{i \times j} = \begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} &amp; \cdots &amp; a_{16} \\ a_{21} &amp; a_{22} &amp; a_{23} &amp; \cdots &amp; a_{26} \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{i1} &amp; a_{i2} &amp; a_{i3} &amp; \cdots &amp; a_{ij}\end{bmatrix}\end{equation}$$ 在R中生成矩阵的函数为matrix:123456&gt; m &lt;- matrix(c(1:12),c(3,4))&gt; m [,1] [,2] [,3] [,4][1,] 1 4 7 10[2,] 2 5 8 11[3,] 3 6 9 12 可以看到我们用matrix函数将向量c(1:12)构建成了一个$3 \times 4$的矩阵，并且矩阵的填充是按照列填充的，如果我们想按照行填充命令如下：123456&gt; m &lt;- matrix(c(1:12),c(3,4),byrow = TRUE)&gt; m [,1] [,2] [,3] [,4][1,] 1 2 3 4[2,] 5 6 7 8[3,] 9 10 11 12 我们这里会看到矩阵m的长度是等于$i \times j$的：123&gt; t &lt;- matrix(c(1:1500),c(30,50))&gt; length(t)[1] 1500 所以创建矩阵时要注意矩阵的长度，否则会产生错误。 因子因子为处理分类数据提供了一种非常有效的方法，因子是一个对等长的的其它向量进行分组的向量对象。R同时提供了有序和无序因子。我们先看一个例子：1234&gt; t &lt;- c(1,2,5,2,5,2,4,3,1,2)&gt; factor(t) [1] 1 2 5 2 5 2 4 3 1 2Levels: 1 2 3 4 5 首先因子是一个向量，其次因子有个不同的参数就是Levels，这个实际上是向量t中所有的元素去重（unique）后的值，举一个因子的使用：12345678910111213141516171819202122# 假设有若干省的人的提供样本体重数据# state表示包含数据的省份state &lt;- c("上海", "山西", "浙江", "四川", "四川", "广东", "湖南", "湖南", "浙江", "河南", "四川", "河南", "浙江", "浙江", "山西", "上海", "山西", "广东", "湖南", "河南", "浙江", "四川", "四川", "湖南", "山西", "江苏", "四川", "河南", "河南", "江苏")# weight表示对应的省的样本体重数据不含小数weight &lt;- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)# 获取省份的样本的因子水平fs &lt;- factor(state)# 计算每个省份样本的平均体重average_weight &lt;- tapply(weight, fs, mean) 计算的结果如下：123&gt; average_weight 广东 河南 湖南 江苏 山西 上海 四川 浙江 55.50000 56.00000 52.25000 44.50000 55.00000 60.50000 57.33333 53.60000 列表列表是一种泛化的向量（没错它又是向量的变种），但它和向量不同就是列表不要求元素都是同一类型，列表也是有序集合构成的对象，它包含的对象我们又可以成为分量:1234Lst &lt;- list(name="阿三", wife="查无此人", no.children=3, child.ages=c(4,7,9))# 没搞懂老婆都查无此人了怎么还有孩子？手动大笑 其中，列表的分量是可以包含不同的模式或者类型，如一个列表可以包括数值向量、逻辑向量、矩阵、复向量、函数、······，简直是来者不拒。而且分量会被编号，所以可以通过编号来访问分量：1234567891011121314151617181920212223242526272829# 比如想访问阿三可以这样&gt; Lst[[1]][1] "阿三"# 也可以这样&gt; Lst$name[1] "阿三"# 如果想知道阿三第二个孩子的年龄我们可以这样&gt; Lst[[4]][2][1] 7# 还可以这样&gt; Lst$child.ages[2][1] 7# 再来一个彩蛋:定义一个函数，输入阿三的第几个孩子返回一段话f &lt;- function(i) paste("我有个朋友叫",Lst$name,",他的老婆",Lst$wife,",但是他居然有",Lst$no.children,"个孩子,而且第",i,"个孩子",if (Lst$child.ages[i] &gt;= 15) "不仅可以读书还可以喝酒了" else if(Lst$child.ages[i] &lt; 15 &amp;&amp; Lst$child.ages[i] &gt;= 6) "正在苦逼的读书吧" else "或许能在幼儿园找个女朋友?" ,sep="")# 运行结果&gt; f(1)[1] "我有个朋友叫阿三,他的老婆查无此人,但是他居然有3个孩子,而且第1个孩子或许能在幼儿园找个女朋友?"&gt; f(2)[1] "我有个朋友叫阿三,他的老婆查无此人,但是他居然有3个孩子,而且第2个孩子正在苦逼的读书吧"&gt; f(3)[1] "我有个朋友叫阿三,他的老婆查无此人,但是他居然有3个孩子,而且第3个孩子不仅可以读书还可以喝酒了"# 我到底在玩什么啊！！！！！ 数据框数据框也是R常用的数据对象，数据框是和矩阵类似的一种结构，在数据框中，不同的列是可以为不同的对象。一般可以使用data.frame函数来创建数据框对象：12# 我们沿用因子中的数据即省份的体重样本数据来构建数据框&gt; weight_by_state &lt;- data.frame('省份'=state,'体重'=weight) 如果有符合数据框限制的列表可以直接使用as.data.frame()函数转换为数据框，从外部环境读取数据使用read.table()和read.csv均可以创建数据框。 一般数据框有如下的限制条件： 分量必须是向量（数值、字符、逻辑），因子，数值矩阵，列表或其它数据框 矩阵，列表和数据框为新的数据框提供了尽可能多的变量，因为它们各自拥有列，元素或者变量 数值向量，逻辑值，因子保持原有格式，而字符向量会被强制转换成因子 在数据框中以变量形式出现的向量结构必须长度一致，矩阵结构必须有一样的行数 数组最后一个介绍的是数组（其余的类型用的较少就不再介绍），数组是数组可以看作是带有多个下标类型相同的元素集合:12&gt; z &lt;- 1:1500&gt; dim(z) &lt;- c(3,5,100) 通过对dim属性的赋值（赋值的是维度向量），这样就将向量z成为了一个$3 \times 5 \times 100$的数组。所以z的1500个元素，元素的下标可以从1一直标记到对应元素的值。 除了dim()函数创建数组，更通用的可以使用array()函数创建数组：123&gt; s &lt;- array(1:1500,c(3,5,100))&gt; class(s)[1] "array" 对象的模式和属性对象的模式mode是指是该对象基本要素的类型，这是专门用来描述一个对 象特征的术语。另外还有一个所有对象都有的特征是长度length，如果你想知道一个对象更详细的特征可以使用attributes函数来获取：123&gt; attributes(s)$dim[1] 3 5 100 我们把模式和长度称为对象的内在属性。而且对象的模式和长度属性是可以改变的。 今天在坐火车，就写到这里吧，后面会有继续的内容。结束]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用hexo+github搭建静态blog]]></title>
      <url>%2F2017%2F05%2F25%2F%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81blog%2F</url>
      <content type="text"><![CDATA[写在前面过去几年，我曾经用多种方式写作。自从大学毕业，基本不再使用人人网（过去的时候叫校内网），后来新浪云发布，在网上找到了一个基于python的博客系统，随便改了改就发到新浪云上了，还给专门搞了一个一级域名(www.zyx1986.pw，现在已经不能用了）。 再后来，微信公众号开始流行，我也赶了个时髦开了公众号。微信公众号对文本、图片支持的还可以，但对于代码、公式的支持几乎没有，所以在微信公众号的文章大部分是随笔或者鸡汤，没什么营养。 最近开始整理之前的学习笔记，刚开始在简书上发文，刚写了两篇还可以，毕竟简书支持Markdown格式的文章，对代码高亮的支持也不错，但我想写的文章如果有数学公式就尴尬了，很繁琐而且效果不好，所以就想自己搭建一个blog。 搜索了下，hexo+github成了我的选择。 Hexo是什么Hexo是基于node.js的轻量化的博客框架，安装和使用都非常简单，很快就可以上手。并且Hexo支持自定义主题和Markdown格式的文件，极速渲染页面，非常适合经常写文档的朋友。 Hexo有很多插件支持更多更丰富的功能，因此能够支持丰富的文档特性，比如代码高亮、公式等，因此也很适合撰写科技和技术文章。 为什么是HexoHexo最大的优点就是遵循了KISS1原则，其具有以下特点 基于node.js安装简单 支持Markdown格式为源文件 支持MathJax渲染LaTeX的公式（大爱这一点） 支持代码高亮 配置简单可以定制主题 生成的是静态页面可以利用 GitHub的Pages功能 以上就足够了。 声明及准备 本文的安装是基于MacOS 安装准备： github账号 homebrew node.js npm hexo 由于node.js自带npm，所以只需要安装node.js即可。 搭建流程获取github因为是基于GitHub搭建静态blog站点，所以需要先获取GitHub的账号和建立相应的repository。如果你没有GitHub的账号，点击这里注册。 注册完获取到账号后，你可以创建一个repository： 创建的repo的名称为：yourid.github.io 安装node.js因为Hexo是基于node.js，所以要先安装node.js。在这里提供两种方式安装： 通过Homebrew安装强烈建议Mac用户安装Homebrew，通过Homebrew来管理Mac的软件，Homebrew在安装和删除软件上特别方便。 首先安装Homebrew，在终端输入: 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装完Homebrew，可以安装node.js： 1brew install node.js 安装完成后查看： 12node -vnpm -v 以上就完成了node.js和npm的安装。 离线方式安装除Homebrew安装外，可以离线下载安装包安装，点击这里在官网下载pkg安装包后，一路点击安装。 休息下听首歌听听我录得歌，不自动播放了，各位请欣赏，哈哈！ new APlayer({ element: document.getElementById("aplayer0"), narrow: false, autoplay: false, showlrc: 0, music: { title: "一生爱你千百回", author: "allenmagic", url: "http://op0byyd4a.bkt.clouddn.com/%E4%B8%80%E7%94%9F%E7%88%B1%E4%BD%A0%E5%8D%83%E7%99%BE%E5%9B%9E.mp3", pic: "http://7viihf.com1.z0.glb.clouddn.com/face.jpg", } }); 安装hexo安装hexo的命令很简单，在终端输入:1npm install -g hexo-cli 安装完成后可以输入命令查看：1hexo -v 建立本地站点安装完hexo后，需要在本地建立站点并初始化站点:123mkdir blogcd bloghexo init 这样一个本地站点就完全建立了，你也可以用一个命令完成以上操作:1hexo init blog 安装完成后的目录结构为：12345678├── _config.yml├── node_modules├── package.json├── scaffolds├── source└── themes4 directories, 2 files 基本使用在blog目录内依次运行以下命令:123hexo cleanhexo ghexo s 如果正常则会显示：12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 按住CMD键同时点击http://localhost:4000/就可以在浏览器访问本地站点啦. 完结 1.Keep it simple, stupid! ↩]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一个关于风险评测计算的问题]]></title>
      <url>%2F2017%2F05%2F23%2F%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E9%A3%8E%E9%99%A9%E8%AF%84%E6%B5%8B%E8%AE%A1%E7%AE%97%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[前言近几天，在做一个工作相关的内容，就是对企业投资者进行风险评测。我设计了若干个问题，并根据投资者的选项用于评分，但需要提前计算多少种选项的可能性，并计算分数的分布。并根据分数确定相应的分数区间对应的风险等级。 这听上去是个简单的问题，但实际上计算起来颇为复杂，想了不少办法才实现。这里也记录下来，并写成分享的文章可以让大家看一下，说不定可以借鉴。 本次计算主要是使用Python和R。 由于代码比较简单，就不用同步到Github，所有代码在文章里都能获取到。 问题其实这次的问题很简单: 有6个风险评测的问题 每个问题有A、B、C三个选项 每个问题的分值比重不一样 每个选项的分数不一样 需要根据投资者的选择答案计算其最终得分 根据其得分给出风险等级 但我们要根据所有可能的选择结果确定分数范围，并根据分数范围确定其对应的风险等级。所以问题的计算逻辑就如下了： 获取所有的选择答案的组合结果 根据组合计算每一个结果的分数 根据所有分数确定分数区间和风险等级的对应关系 计算投资者的分数 确定投资者的风险等级 获取所有组合我们假设有A、B、C三个选项，对应的分数分别为[25,50,75]:1[A, B, C] = [25, 50, 75] 总共有6道题，每道题有三个选项，所以答案的组合总共有$3^6=729$个，那么分数的可能性就有729个（实际上应该小于729，因为有不同答案但相同分数）。 我们不需要获取ABC的答案组合，只需要获得分数[25, 50, 75]的组合即可，所以我思考了不超过10s，就放弃了使用Excel，因为这么多年早忘了当初那丁点的VBA知识了，而这个要用Excel计算的话必须使用VBA，所以果断放弃。 那么再思考下要怎么计算，我们知道有6个答案，每个答案的分数是[25, 50, 75]中的一个，然后组成一个组合。所以其答案可能是: 1[A, A, B, B, C, A] = [25, 25, 50, 50, 75, 25] 这样的组合总共有729个，所以要获取所有可能的结果，那么可以使用Python的itertools包中的product就是笛卡尔积来计算所有的可能组合： 12345import itertoolss = []for i in itertools.product([25,50,75], repeat =6 ): s.extend([i]) s就是所有的答案分数的组合可能，我们查看下组合的数量：123print(len(s))729[Finished in 0.1s] 如何计算？我们已经知道了，每个答案组合有对应的分数，以上面的组合为例： 1[A, A, B, B, C, A] = [25, 25, 50, 50, 75, 25] 计算其分值为：250(随机的分数都能是这个值我服了)。 但我们不能这样简单的计算分值，因为每个问题的分值权重是不一样的，每个问题的重要程度是不一样的，我们预先定义每个问题权重为： 1[1, 2, 3, 4, 5, 6] = [20%, 20%, 20%, 20%, 10%, 10%] 所以每个投资者的分数计算公式为： $$Score = \sum_{i}^{n=6}score_i \times W_i$$ $score_{i}$即是答案的分值组合，$W_i$为每个答案分值的权重,重新计算的分数结果就是40分。 如果答案组合只有一两个，那么这样计算也就罢了，但我们有729个组合，不可能每个计算出来，至少我们的组合的获取就是要通过工具得出来。怎么计算所有729个组合分数呢，而且当选项扩展至4个甚至5个，问题扩展至数十个，那么答案组合就更多了，怎么办呢？ 复习下矩阵计算在6个问题3个答案的情况有729个组合，每个组合是有6个分数组成，每个分数有对应的权重，我们想到这样一个公式，$A_{m \times n}$ $\times$ $B_{n \times k}$ = $C_{m \times k}$: $$\begin{equation}\begin{bmatrix} 1 &amp; 2 \\ 3 &amp; 4\end{bmatrix}\times\begin{bmatrix} 1 \\ 2\end{bmatrix}=\begin{bmatrix} 5 \\ 11\end{bmatrix}\end{equation}$$ 这是线性代数中所学习的矩阵乘法，那么我们就可以认为，729个组合每个组合为6个分数，所以可以看成一个$729 \times 6$的矩阵$A_{729 \times 6}$，那么权重则是一个$6 \times 1$的矩阵$B_{6 \times 1}$，所有两个矩阵相乘则生成一个矩阵$C_{729 \times 1}$。 那么计算的整个公式就是： $$\begin{equation}\begin{bmatrix} a_{11} &amp; a_{12} &amp; a_{13} &amp; \cdots &amp; a_{16} \\ a_{21} &amp; a_{22} &amp; a_{23} &amp; \cdots &amp; a_{26} \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_{i1} &amp; a_{i2} &amp; a_{i3} &amp; \cdots &amp; a_{ij}\end{bmatrix}\times\begin{bmatrix}b_{11} \\b_{21} \\\vdots \\b_{61}\end{bmatrix}=\begin{bmatrix}c_{11} \\c_{21} \\\vdots \\c_{i1}\end{bmatrix}\end{equation}$$特别的，$(i, j) = (729, 6)$。 Python计算逻辑和代码我们考虑整个计算的顺序和逻辑如下： 获取所有分数组合 将分数组合生成为矩阵 构建权重的矩阵 分别两个矩阵相乘 得到所有分数 用R做分数的图形分布 根据分布确定不同风险等级的分位数 我们考虑每一个步骤的代码： 获取所有分数组合 12345import itertoolss = []for i in itertools.product([25,50,75], repeat =6 ): s.extend([i]) 将分数组合生成矩阵 123import numpy as npsm = np.mat(s) 构建权重的矩阵 1w = np.mat([0.2,0.2,0.2,0.2,0.1,0.1]) 矩阵相乘 1score = np.matrix.tolist(sm*w.T) % w.T指将矩阵转置为列矩阵 这段代码使用了np.matrix.tolist将计算后得到的矩阵直接转换为list列表，后面的第6步和第7步考虑在Python中调用R来实现。 Python调用R分析数据数据的预处理首先，需要使用python生成csv文件以供R使用，当然也可以在R中使用rpy2包调用R来分析。 使用python生成csv文件： 12345writer = csv.writer(file("score.csv",'wb'))writer.writerow(['Value'])for s in score: writer.writerow(s) 在R中导入数据： 123rm(list = ls())setwd("/Users/eggs/Library/Mobile Documents/com~apple~CloudDocs/文档/document")score &lt;- read.csv("score.csv",header = TRUE) 怎样分析数据？其实分析的思路挺简单，总共有729个总体值，但实际上计算出来的Score值只有21个，所以我们要考虑每个Score值占总体组合的概率。一般我们考虑CDF（cumulative distribution function）就是累积分布函数： $$F(X) = F(x \leq X) =\begin{cases}\sum_{i=1}^{x \leq X}P_{x=i}， &amp; \text{x是离散的} \\[3ex]\int_{-\infty}^{X} f(x)\,dx， &amp; \text{x是连续的}\end{cases}$$ 所以我们可以在R中画出Score的累积分布函数图。 画累积分布函数图 画出累积分布图 12par(family='MicrosoftYaHei')plot(ecdf(score$Value), do.points=FALSE, verticals=TRUE, main = 'CDF of score', xlab = 'score', ylab = 'CDF' ) 画出来的图如下： 用分位数工具取数 我们假设取[20%, 80%]分位数的值： 1234y &lt;- quantile(score$Value,c(0.2,0.8)) 20% 80% 42.5 57.5 那么，我们可以认为： 分数在[0,25)之间的为谨慎型，当然这一类别是理论值，不会通过问卷计算出来分数在[25,42.5]之间的为保守型，占20%比例分数在(42.5,57.5]之间的为谨慎型，占60%比例分数在(57.5,75]之间的为积极型，占20%比例 结束语在这里简单的做了一个关于风险评测的计算介绍，由于最近比较忙，所以内容写的也不怎么严谨。简单说就是思路清奇，排版华丽（你知道我说的是反话）。而且最近也没写什么，所以只是恰好碰到问题就随便写了篇，姑且看着吧。 python代码如下：123456789101112131415161718192021__author__ = "Eggs"# coding: utf-8import itertoolsimport numpy as npimport csvs = []for i in itertools.product([25,50,75], repeat = 6 ): s.extend([i])sm = np.mat(s)w = np.mat([0.2,0.2,0.2,0.2,0.1,0.1])score = np.matrix.tolist(sm*w.T)writer = csv.writer(file("score.csv",'wb'))writer.writerow(['Value'])for s in score: writer.writerow(s) R的代码如下：123456789101112rm(list = ls())setwd("/Users/eggs/Library/Mobile Documents/com~apple~CloudDocs/文档/document")score &lt;- read.csv("score.csv",header = TRUE)a &lt;- unique(score$Value)par(family='MicrosoftYaHei')plot(ecdf(score$Value), do.points=FALSE, verticals=TRUE, main = 'CDF of score', xlab = 'score', ylab = 'CDF' )y &lt;- quantile(score$Value,c(0.2,0.8))length(score$Value)length(a)y 运行的结果如下：1234567&gt; length(score$Value)[1] 729&gt; length(a)[1] 21&gt; y 20% 80% 42.5 57.5 一个测试：如果我们把题目答案扩展到4个，题目增加为10个，计算的结果如下：1234567&gt; length(score$Value)[1] 1048576&gt; length(a)[1] 119&gt; y 20% 80% 43.5 56.5 可见总共的样本超过了100万，我们可以用图形观察如下： CDF图形： 概率密度图形： 可见样本越多，图形越平滑，而且其分布越接近正态分布（极限中心定理）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据分析系列-R-初探-介绍和安装]]></title>
      <url>%2F2017%2F04%2F19%2F%E5%AD%A6%E4%B9%A0R%E7%B3%BB%E5%88%97-1-%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[导言 上次说要把以前的笔记整理成文档，首先想要完成的就是R相关的学习笔记。所以近期准备写数据分析系列的文章，先从R开始，后续再介绍Python或者Excel。本文介绍R相关的基本知识和安装。因为这些是比较基础的内容，我并没有相关的学习笔记，所以临时撰写了一篇。 为什么是R我的职业之路是从数据分析开始的，但我是从大学开始学习R的，虽然是断断续续的学习，至少也算入了门。后来在工作中也时不时的用到，R具有一系列的特点就决定了它是个优秀的软件（或者编程语言），所以我希望能够介绍一下它。 R是什么R一般有两种解释：R编程语言和R程序。R语言是由奥克兰大学的Ross Ihaka和Robert Gentleman在20世纪90年代初开发。是一个GNU项目1,所以R是一个自由开源软件。 R是一种数据分析工具，意味着你可以像使用Excel那样使用它。不过，它和Excel不同的是，Excel在数据可视的情况下进行处理。R会用不同的对象和数据类型包装原数据，然后操作对象，并不显得直观。但处理数据的效率和大数据的支持，远比Excel优秀。 R也是一种编程语言，支持面向对象和函数式编程，所以你可以使用R编写数据处理和分析的程序，将数据分析工作做的更轻松。 和R类似的软件有Matlab,SAS,S-plus,S,SPSS等等，但R是免费的… 安装RR是开源软件，你可以自由的获取到安装包，而且R是免费的，其官方网站为： R官方网站 其下载地址为：Mac版下载地址Windows版下载地址Linux下载地址 建议Linux用户使用包管理软件下载，Ubuntu和Debian用户在终端输入： 1sudo apt-get install r-project Fedora和Redhat用户在终端输入：1sudo yum install r-project Arch Linux用户在终端输入：1sudo pacman -S r-project 启动R我们可以在命令行中运行R，比如在Linux或者Mac的终端中输入：1R 结果就如图所示： 寻找合适的IDER安装后默认装了R console，你可以运行R console使用R，但这个IDE很简单，用起来并不会那么顺手。 所以我们需要找到适合自己的IDE或者其它环境，强烈建议用户使用RStudio,RStudio支持Windows、Mac和Linux系统，其下载地址如下：RStudio下载地址 Linux用户应该可以使用包管理软件安装，Windows用户还可以在R环境中使用如下命令安装：123install.packages(&quot;installr&quot;) # 下载安装installr包library(installr) # 装在installr包install.RStudio() # 下载并安装RStudio IDE RStudid的默认界面如下： 如果你是Emacs2用户，你还可以使用Emac+ESS的环境来编辑R程序，另外Sublime Text也有集成的环境。 初探R 说明：本例所有代码在RStudio中编辑和运行 R一般是通过命令或者程序脚本来操作数据对象，所以它的使用方法和Excel不同。这里简单介绍一下： 计算数据长度123&gt; n &lt;- c(1,2,3,4) # 创建一个向量并命名为n&gt; length(n) # 获取向量的长度[1] 4 # 向量的长度为4 这个方式和Excel有很大的不同，Excel需要在表格中输入数据，然后用公式求解。 我们又分别计算这个向量的平均值、中值以及标准差，R的代码如下：123456&gt; mean(n) # 计算向量n的均值&gt; [1] 2.5 # 计算结果为2.5&gt; median(n) # 计算向量n的中位值&gt; [1] 2.5 # 计算结果为2.5&gt; sd(n) # 计算向量n的标准差&gt; [1] 1.290994 # 计算结果 我们不需要关心n有多少数据，也不需要在R中一定要看到所有数据就能执行计算。 Excel的处理和运算则如图所示： 事实上，R支持的更多的数据对象类型，可以使得我们有很多默认的函数来计算需要的值，也可以自己创造函数来计算。 先说到这，后续更多 1.GNU项目是由Richard Stmallman发起的自由开源软件项目，全名是GNU is Not Unix ↩2.Emacs也是GNU项目的成果，你可以在GNU Emacs主页查看更多信息。 ↩]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用LaTeX写文档]]></title>
      <url>%2F2017%2F04%2F18%2F%E4%BD%BF%E7%94%A8LaTeX%E5%86%99%E6%96%87%E6%A1%A3%2F</url>
      <content type="text"><![CDATA[导言 平时工作也一直在用LaTeX，也一直想写一篇入门的文档。最近也在写产品手册，正好也在使用LaTeX撰写，所以写一篇介绍基本用法的文章，以供大家了解。 一、LaTeX简单介绍LaTeX是一个文档处理的宏包，只要你选择了对应的文档格式，设置好具体的页面排版方式，后续专注于写作内容即可。相比较Word这种所见即所得的文字处理软件，LaTeX的一个特点就是在撰写文档的时候，不知道具体的文档生成的样式（但你可以估计到生成的格式）。 标准的LaTeX文档是以.tex结尾的纯文档文本，所以其跨平台性特别好。一个写好的tex文档，在任何平台编译出来效果是完全一致的。而word、page文档等，在不同平台不同的软件下显示的结果是不一样的，所以其跨平台性很差。而且，纯文本文档有个好处就是文件小，并且通过一些管理工具非常容易管理。而且编辑tex的软件很多，不需要专有软件才能编辑。 LaTeX对数学公式的支持非常优秀，因此被广大的科技工作者、大学生用于撰写科技文章或者专业的论文，国外的学术杂志甚至只接受LaTeX的论文文档。 LaTeX是一系列宏包集合，因此一个标准的TeX文档应该是命令和文字的结合。 二、安装和使用LaTeX是一个排版系统，因此需要安装这个系统，其下载地址为： Windows MacOS Linux 建议Windows用户使用TeXLive，MacOS用户使用MacTeX（当然如果你是高级用户了可以尝试Basic版本的MacTeX，占用空间小）。Linux用户可以下载TeX的软件包，也可以用系统带的包管理器下载。（比如Debian和Ubuntu可以使用apt-get install，Fedora可以使用yum，Arch用户可以使用pacman等） 编辑文档的工具可以有很多种，最简单的是记事本（但肯定很难用）。一般Windows建议使用WinEdt,Linux用户可以使用LyX这一个可以预览的TeX编辑软件（几乎等同于所见即所得了），如果熟练了用户可以使用Sublime Text+LaTeXtools以及GNU Emacs。 三、入门的简单文档1、TeX文档的基本框架 1234\documentclass[a4paper,11pt]&#123;article&#125; %声明文档类型为article\begin&#123;document&#125; % 声明文档开始 This is a test document for \LaTeX . %文档内容\end&#123;document&#125; % 文档结束 首先要声明文档的样式，LaTeX支持多种文档类型，一般常用的是book、article、report三种。不同的文档类型有不同的结构。”%”后面的内容是注释，不会在编译后生成的文档中显示。 文档的内容都在\begin{document}和\end{document}之间，\begin{document}表示声明文档内容开始，\end{document}表示文档结束。 2、支持中文 LaTeX支持中文的方式有两中，一个使用CJK包然后声明一个CJK环境。另外一个用xunicode使用unicode字符支持中文。本文介绍第二种方式（我不喜欢CJK）。 示例内容： 1234567\documentclass[a4paper,11pt]&#123;article&#125;\usepackage&#123;fontspec, xunicode, xltxtra&#125;\begin&#123;document&#125; This is a test document for \LaTeX . \\ 这是一个\LaTeX 中文样本文档。\\\end&#123;document&#125; 编译后发现内容如下： 中文不能正常显示，原因在于字体的设置，因此需要重新设置字体，如果只是简单的使用一种字体，那么可以如下处理： 12345678910\documentclass[a4paper,11pt]&#123;article&#125;\usepackage&#123;fontspec, xunicode, xltxtra&#125;\setmainfont&#123;MicrosoftYaHei&#125; \XeTeXlinebreaklocale &quot;zh&quot; %中文的断句\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt\begin&#123;document&#125; This is a test document for \LaTeX . \\[10pt] 这是一个\LaTeX 中文样本文档。\\\end&#123;document&#125; 特别注意，中文的断句方式和英文是不一样的（英语是自动断句），因此需要声明中文的断句方式为”zh”。\\\[10pt]表示换行，并且下一行和上一行行距为10pt。 生成的文档如下： 四、更进一步1、\\usepackage[option]{package} LaTeX很多功能需要宏包提供，所谓宏包就是一个文件提供了很多功能用于作者调用。宏包的调用命令如下： 1\usepackage[colorlinks,citecolor=green]&#123;hyperef&#125; %使用超链接宏包 举例如下： 1234567891011121314\documentclass[12pt,a4paper,openany,fleqn]&#123;book&#125; %声明文档类型\usepackage&#123;fontspec, xunicode, xltxtra&#125; %使用xunicode相关宏包\usepackage&#123;tikz&#125; %使用tikz宏包画图\usepackage&#123;subfig&#125; %使用subfig宏包\usepackage&#123;color&#125; %使用color宏包调用颜色\usepackage&#123;graphicx&#125; %使用graphicx处理图片\usepackage&#123;titlesec&#125; %使用titlesec定义章节标题等\usepackage&#123;indentfirst&#125; %首行缩进处理\usepackage&#123;geometry&#125; %使用geomtry包设置页面\usepackage[colorlinks,linkcolor=black,anchorcolor=blue,citecolor=green]&#123;hyperref&#125; %使用超链接\usepackage&#123;wrapfig&#125; %使用wrapfig处理浮动图片\usepackage[fleqn]&#123;amsmath&#125; %使用amsmath处理公式\usepackage&#123;latexsym&#125;\usepackage&#123;booktabs&#125; 2、图片处理 我们写文档时，很多时候都需要添加图片至文档，LaTeX处理图片一般有很多宏包，用的最多的就是graphicx宏包。使用方式如下： 12345678910111213141516171819\documentclass[a4paper,11pt]&#123;article&#125;\usepackage&#123;fontspec, xunicode, xltxtra&#125;\usepackage&#123;graphicx&#125; %要加载graphicx宏包\setmainfont&#123;MicrosoftYaHei&#125; \XeTeXlinebreaklocale &quot;zh&quot; %中文的断句\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt\begin&#123;document&#125; This is a test document for \LaTeX . \\[10pt] 这是一个\LaTeX 中文样本文档。\\ 这个是广发基金的Logo图片。\\ \begin&#123;figure&#125;[htbp!] \centering %图片居中 \includegraphics[width=\textwidth]&#123;picture/guangfa.jpg&#125; \label&#123;fig:gflogo&#125; \caption&#123;广发基金LOGO&#125; \end&#123;figure&#125;\end&#123;document&#125; 编译后生成的文档截图如图所示： \\centering是居中的命令，另外也可以用\\begin{center}文档内容\\end{center}居中环境来处理文档居中。 3、表格处理 除了图片，我们很多时候还要处理表格。表格可以使用宏包来处理。本示例使用booktabs宏包处理，示例代码如下： 123456789101112131415161718192021222324\documentclass[a4paper,11pt]&#123;article&#125;\usepackage&#123;fontspec, xunicode, xltxtra&#125;\usepackage&#123;booktabs&#125;\setmainfont&#123;MicrosoftYaHei&#125; \XeTeXlinebreaklocale &quot;zh&quot; %中文的断句\XeTeXlinebreakskip = 0pt plus 1pt minus 0.1pt\begin&#123;document&#125;%处理表格\begin&#123;table&#125;[htbp]\caption&#123;人员表&#125;\label&#123;tab:function&#125;\begin&#123;tabular*&#125;&#123;\textwidth&#125;&#123;@&#123;\extracolsep&#123;\fill&#125;&#125;lcc&#125; \toprule %------------------------------------- 姓名 &amp;性别 &amp;年龄 \\ \midrule %------------------------------------ 张三 &amp;男 &amp;20 \\ 李四 &amp;男 &amp;32 \\ 李倩 &amp;女 &amp;25 \\ \bottomrule %--------------------------------- \end&#123;tabular*&#125;\end&#123;table&#125;\end&#123;document&#125; 生成的表格图示如下： 五、总结LaTeX有很多其它的功能，特别是在编写大型文档或者书籍时效率很高。包括写公式、引用、参考文献处理，非常有用。 附上最近写的产品文档的源文件地址：汇添富企业版产品手册源文档汇添富企业版产品手册PDF文件由于文件太大不能正常下载，请使用新汇添富企业版产品手册PDF 更多的功能，请后续关注。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Python画股票的K线图]]></title>
      <url>%2F2017%2F04%2F17%2F%E4%BD%BF%E7%94%A8Python%E7%94%BB%E8%82%A1%E7%A5%A8%E7%9A%84K%E7%BA%BF%E5%9B%BE%2F</url>
      <content type="text"><![CDATA[导言 本文简单介绍了如何从网易财经获取某支股票的价格数据，并根据价格数据画出相应的日K线图。有助于新手了解并使用Python的相关功能。包括列表、自定义函数、for循环、if函数以及如何使用matplotlib进行作图等内容。 第一步：从网易财经获取股票的价格数据我一般是在网易财经查看某支股票的价格和成交数据，网易财经可以查到任意沪深的股票，我们使用招商银行的数据作为参考。 1、构建爬虫获取股票价格数据这里不对Python做介绍了，如果需要了解什么是Python，可以自行百度或者访问Python官网. 加载需要的模块 代码如下： 12345import re,urllib2,time,csv,datetimeimport matplotlib as mplimport matplotlib.pyplot as pltimport matplotlib.finance as mpfimport matplotlib.dates as mpd 其中urllib2是用来解析HTML内容的包，主要是从url获取网页内容；re是正则表达式包，本文会使用正则表达式来从抓取的网页数据中获取到有用的数据；time和datetime是时间相关的包，主要用来设定要抓取的时间以及其它相关时间的处理；csv包是用来生成csv数据（该数据会被用于R来画K线图），其余的几个包会在使用时单独介绍，你也可以在需要的时候在程序头部补充import。 设定时间相关 代码如下： 123t = time.localtime() # 获取当前的本地时间year = range(t[0],1989,-1) # 设定年度范围，从当前年度至沪市开市的年份倒序生成season = range(4,0,-1) # 生成季度的数据列表，从4季度到1季度倒序生成 为什么要这么设定时间呢？仔细的查看网易股票数据的url，是按照年度和季度来构成的，我们发现搜索数据也是用年度和季度来搜索的。其url构成如下：http://quotes.money.163.com/trade/lsjysj_600036.html?year=2017&amp;season=1可见可拆为6个子字符串，分别是http://quotes.money.163.com/trade/lsjysj_、600036、.html?year=、2017、&amp;season=、1。其中第2、4、6个子串可以参数化输入获取特定需求的数据。 定义获取数据的函数 代码如下： 12345678910111213141516171819202122232425def getData(url): request = urllib2.Request(url) response = urllib2.urlopen(request) content = response.read() pattern = re.compile('&lt;/thead[\s\S]*&lt;/tr&gt; &lt;/table&gt;') ta = re.findall(pattern, str(content)) pattern1 = re.compile("&lt;td class='cGreen'&gt;") pattern2 = re.compile("&lt;td class='cRed'&gt;") pattern3 = re.compile(",") tab1 = re.sub(pattern1,"&lt;td&gt;",str(ta)) tab2 = re.sub(pattern2,"&lt;td&gt;",str(tab1)) tab = re.sub(pattern3, "", str(tab2)) if len(tab) == 0: data = [] else: pattern3 = re.compile('&lt;td&gt;(.*?)&lt;/td&gt;') data = re.findall(pattern3, str(tab)) for d in data: if d == '': data.remove('') return data 本段代码定义个一个函数getDate(url)，函数名为getData，参数为url。相当于从该url获取股票的交易数据，显然这个函数是定制的。 首先，我们用urllib2模块的相关函数解析并获取网页的数据。第二步，使用re模块的数据对抓取的网页内容进行初步的处理，分为了三个过程 首先匹配” “之间的内容并返回，因为在这之间的内容包含了所有需要的数据，这是一个简单的正则表达式，表示返回 两个字符串之间的所有内容 匹配、并使用替换，因为这两个字符串会影响后续的匹配数据，现行替换掉可以更方便的匹配到需要的数据 替换到千分位”,”号，因为Python和R并不会识别有千分位号的数据，所以我们要将数据转换为非千分位的数据。 tab是按照要求最后获取的包含数据和文本的原始内容 用if函数来获取除文本的数据，因为如果year和season超过了当前的界限，会返回空的tab，所以我们在这里进行判断，如果少了这个判断，会报出index error。这个if函数表示了如果tab为空，data也是个空的列表，如果tab不为空，那么根据pattern3返回需要的数据至data列表 用一个for循环来遍历data列表，删除空白的内容（其实这一步不需要，因为在if中已经剔除了空的内容。 所以定义了以上的函数后，就可以使用该函数返回特定url的数据。 获取某支股票的数据 代码如下： 12345678910111213def get_stock_price(code): url1 = "http://quotes.money.163.com/trade/lsjysj_" url2 = ".html?year=" url3 = "&amp;season=" urllist = [] for k in year: for v in season: urllist.append(url1+str(code)+url2+str(k)+url3+str(v)) price = [] for url in urllist: price.extend(getData(url)) return price 自定义get_stock_price(code)函数，code是指股票代码，使用该函数可以返回该股票所有的历史数据（OHLC以及其它）思路很简单： 根据code构建其股票数据的页面的url列表 使用getData(url）函数和for循环，返回所有的历史数据 最终返回的是price的数据列表 这样，我们就可以使用该函数获取某支股票的所有历史数据： 12# get all histrocial data include all price and othersprice = get_stock_price(600036) 获取招商银行（600036）的所有历史数据。 2、保存数据保存为csv文件 代码如下： 12345678writer = csv.writer(file("stock.csv",'wb'))writer.writerow(['Date','Open','High','Low','Close','Volume'])pr = []for i in range(0,len(price),11): pr.extend([[price[i],price[i+1],price[i+2],price[i+3],price[i+4],price[i+8]]])for prl in pr: writer.writerow(prl) 我们使用csv模块保存数据为csv文件，用于在R中读取并作图，我们查看在网易的数据展示可以发现，总共11个字段，所有我们在每11个切片中，返回时间、OHLC（开盘价、最高价、最低价、收盘价）和交易量的数据并保存为csv的文件格式。 处理保存数据到列表 代码如下： 1234567891011121314151617181920# get the number for date by date2numdef Date_no(strdate): t = time.strptime(strdate, "%Y-%m-%d") y,m,d = t[0:3] d = datetime.date(y, m, d) n = mpd.date2num(d) return n# get the price data pr = []for i in range(0,len(price),11): pr.extend([[ Date_no(price[i]) ,float(price[i+1]) ,float(price[i+2]) ,float(price[i+3]) ,float(price[i+4]) ,float(price[i+8])]] ) 这个程序片段是用来处理和保存数据用于在pyhton中做出K线图。 定义函数将字符串的时间处理为matplotlib中作图使用的数值（直接获取的数据中时间是字符串） 返回返回时间、OHLC（开盘价、最高价、最低价、收盘价）和交易量的数据并存储在pr这个列表里 第二步：做出K线图在R中作图 代码如下： 123456789101112library(quantmod)rm(list = ls())setwd("~/GitHub/index/")price &lt;- as.xts(read.zoo("stock.csv",header=TRUE,sep=",",colClasses = c("Date", rep("numeric",5))))n &lt;- nrow(price)m &lt;- nrow(price)-100#pdf(file = "k.pdf")chartSeries(price[c(m:n)],theme = chartTheme("white"),up.col = "red",dn.col = "green",name = "600036",time.scale = 0.5,line.type = "l",bar.type = "ohlc",major.ticks='auto', minor.ticks=TRUE)#dev.off() 做出的图片效果如下：R中可以使用quantmod包中的chartSeries函数画出K线图，具体的使用方法可以参考chartSeries参考文档 在Python中使用matplotlib作图 代码如下： 123456789101112quotes = pr[0:80]print(quotes)fig,ax = plt.subplots(figsize=(30,6))fig.subplots_adjust(bottom=0.2)mpf.candlestick_ohlc(ax,quotes,width=0.4,colorup='r',colordown='g')plt.grid(False)ax.xaxis_date()ax.autoscale_view()plt.setp(plt.gca().get_xticklabels(), rotation=30) plt.show() K线效果图如下：使用matplotlib的candlestick_ohlc的参考文档,但是目前有一些问题，比如会将非交易日期也置放在x轴，会到至K线出现断裂，等待下一步的解决方法吧。 相关的代码已经同步到最大的同性交友网站我的Github上了，可以参考，其中stock.py是主要程序。 写在最后：因为我有近5年没使用过python了，所有代码可能不太简练。我也旨在解决问题，当然解决问题的方法千万种，比如这个例子，最直接的办法就是使用网易的下载所有（或者特定时间段）的数据为csv格式，然后用Excel画K线也可以的。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于蒙特卡洛模拟法计算投资组合的VaR值]]></title>
      <url>%2F2017%2F04%2F17%2F%E5%9F%BA%E4%BA%8E%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F%E6%B3%95%E8%AE%A1%E7%AE%97%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E7%9A%84VaR%E5%80%BC%2F</url>
      <content type="text"><![CDATA[导言 VaR是目前通用的风险管理技术，适用于计算投资组合在一定置信水平下的损失不超过某值。计算VaR的方法有多种，本文试图介绍常用的蒙特卡洛模拟的方法计算特定投资组合的VaR值。 一、VaR的概念1.什么是VaR VaR是指假设目前的投资组合在未来一段时间冻结，将投资组合的头寸和到期前的不确定风险均考虑在内，有如下定义： 在一定置信水平下，投资组合在未来确定时间的损失不超过某个值，这个值就是VaR值。因此，VaR被一般定义为最小损失，是一个正数。具体的表达式如下： $$P(L&gt;VaR) \leq 1-c$$ L是指Loss(即投资组合的损失值)，c是指置信水平（例如95%）。所以公式可以解读为损失值大于VaR的概率不超过5%。 2.如何计算VaR 计算VaR的步骤一般如下： 逐日盯市确认投资组合的市值，比如1亿人民币。 衡量风险因素的变化率，可以根据历史数据计算其波动率。 设定时间区域，样本观察时间段，调整交易时间。 设定置信水平，例如95%。 分析数据，得出收入的分布概率，计算潜在的最大损失，综合得出VaR值 3.简单的描述VaR 我们可以用图形来定义VaR的概念，假设投资组合的收益R符合正态分布：$R \sim N(\mu,\sigma^2)$，也就是时候收益率R的图形是一个正态分布的图形，假设初始本金为$W_0$，那么到期后的收益为$W=W_0(1+R)$，其中净收益为$W-W_0$ 因此其收益显然也是符合正态分布。 从图中我们能看到，在x=-0.02处我们视为5%的发生率（假设），所以可以我们能看到计算的VaR值的区域，所以VaR就是计算该区域的值。 计算VaR的方法有多种，一般可以通过以下几种方法计算： 局部估值法和完全估值法 德尔塔-正态法 历史模拟法 蒙特卡罗模拟法 测量VaR有多种方法，一般其比较如下： 特征 德尔塔-正态 历史模拟 蒙特卡洛模拟 估值 线性 完全 完全 形状 正态 真实 一般都可以 是否随时间变化 是 可能 是 隐含的数据 可能 没有 可能 极端事件的反应 以低概率反映 在最近数据中反映 可能反映 相关系数的使用 是 是 是 VaR的精确性 极好 用短期窗口时较低 大量迭代时精确度好 是否容易计算 是 是 否 定价的精确性 取决于投资组合 是 是 可解释性 容易 容易 困难 VaR分析 容易分析 比较困难 比较困难 主要缺点 非线性、后尾 风险随时间变化、异常事件 模型分析 二、蒙特卡洛模拟蒙特卡洛模拟算是一种数值分析方法， 还未写完]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于新的blog的说明]]></title>
      <url>%2F2017%2F04%2F17%2F%E5%85%B3%E4%BA%8E%E6%96%B0%E7%9A%84blog%E7%9A%84%E8%AF%B4%E6%98%8E%2F</url>
      <content type="text"><![CDATA[说明这是我的新的Blog，是的我又要开始折腾写文章了，这次是被迫无奈才自己用hexo在Github上部署了一个博客。花了一个多小时基本上框架已经搭建好了，之前写的两篇发表在简书的文章也迁移过来了，幸好文档都是用markdown写的，迁移过来基本不费事，很快就搞定了。 目前，Blog运行在Github上，同时我会将其也部署到七牛云上，这样也不用担心有的时候Github会因为被墙而不能访问。做好起码的备份是必须要考虑的。 为什么我要迁到新的Blog我一直对自己的评价是：善于学习和思考，但不善于表达。有例为证，高中时候的语文考试，阅读理解满分是家常便饭，而作文长期在40-50分之间晃荡，很难突破50分。但我呢却仍旧不死心，坚持写，哪怕写的再烂也无所谓，反正不能更烂了。 迁移到新的Blog的原因是，前几天我开始把以前的一些笔记整理成文档的时候，想发到一些内容平台。于是我使用了简书，但刚开始一些简单的文章可以在简书处理（简书支持markdown格式的文档，因此比如涉及到代码的部分可以正常显示），但后来写一篇关于蒙特卡洛模拟的文章发现，要正常的显示公式实在太繁琐。首先，我要写好公式然后去除掉空格，再批量在公式前后加上前缀和后缀，这样就可以生成图片链接，然后在Markdown文档中用图片方式显示处理，大家可以看看这个效果： 想到以后要写大量的文章，这些公式处理起来太麻烦了，所以就想能不能找到直接支持mathjax的平台，找了一圈太失望，没有啊。所有我就想干脆自己搭建一个。至少这个平台要支持markdown、mathjax和代码高亮。 HEXO是个不错的东西于是，我找到了Hexo这个博客系统，基于node.js非常轻量化，支持markdown格式的文档，并且支持mathjax。这样我可以在markdown中直接使用LaTeX写公式，不用再做多余的工作。另外，我是一个极简主义者，不喜欢一个页面这样那样的东西太多，这玩意简直太适合我。 花了20分钟读文档，再花了30分钟安装和配置，然后花了10分钟把文档迁移过来，总过耗费了一小时就搞定。以后还可以不断折腾，自己修改theme，这样个性化就十足了。 嗯，还有好一点，这个hexo + next的站点在手机上也有很好的阅读体验，真的很赞。 写文章的历程十年前，我们用QQ空间记录日志，后来校内网开始流行，那时候花了大半的时间整天研究CSS，想着把校内做的很漂亮很酷炫。可是没什么用，倒是有室友经常和人互动，最终居然在校内网找到了女朋友。 那时候还经常写日志，用现在的话来说就是无病呻吟。写的不好，还假装文青，现在回过头看那些文章鸡皮疙瘩一身。后来微信公众号出来，写了一段时间，但也是出于格式支持大部分时间写一些叙事的文章，而且花了很多时间在排版上。发一个文章基本上要耗费两个小时，效率太低而且干货太少。这几年常耕不辍的学习，也学到了不少东西，但很难在微信公众号分享，毕竟微信支持文本，可心灵鸡汤太多。 以后，会写很多偏学术技巧的文章，所以要大量的用到不少功能，这个博客应该能在未来一段时间满足我的需求。]]></content>
    </entry>

    
  
  
</search>
